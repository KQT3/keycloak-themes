{"version":3,"file":"static/js/413.38bf33de.chunk.js","mappings":"+gBAgBMA,GAAsBC,EAAAA,EAAAA,OAAK,SAACC,GAC9B,IAAQC,EAAiGD,EAAjGC,UAAWC,EAAsFF,EAAtFE,KAAI,EAAkFF,EAAhFG,6BAAAA,OAA4B,IAAG,GAAI,IAA6CH,EAA3CI,SAAAA,OAAQ,IAAG,EAAAC,EAAAA,EAAe,EAAKC,EAAO,EAAKN,EAAnG,gEAEEO,EAA+DN,EAA/DM,IAAKC,EAA0DP,EAA1DO,iBAAkBC,EAAwCR,EAAxCQ,kBAAmBC,EAAqBT,EAArBS,iBAE1CC,EAAgBT,EAAhBS,IAAKC,EAAWV,EAAXU,OAEb,GAAgDC,EAAAA,EAAAA,WAAS,GAAM,eAAxDC,EAAgB,KAAEC,EAAmB,KAE5C,OACIC,EAAAA,cAACZ,EAAQ,gCACCH,UAAAA,EAAWC,KAAAA,EAAMC,6BAAAA,GAAiCG,GAAO,CAC/DW,eAAgBT,EAAiBU,OAAO,UACxCC,uBAAuB,EACvBC,WAAYT,EAAI,iBAChBU,SACIL,EAAAA,cAAAA,OAAAA,CAAMM,GAAG,mBAAmBC,WAAWC,EAAAA,EAAAA,GAAKlB,EAAQmB,aAAcC,OAAQnB,EAAIoB,mBAAoBC,OAAO,QACrGZ,EAAAA,cAACa,EAAAA,EAAqB,eAAC5B,UAAWA,EAAW6B,+BAAgCf,EAAqBb,KAAMA,GAAUI,IACjHG,GACGO,EAAAA,cAAAA,MAAAA,CAAKO,UAAU,cACXP,EAAAA,cAAAA,MAAAA,CAAKO,WAAWC,EAAAA,EAAAA,GAAKlB,EAAQyB,sBACzBf,EAAAA,cAAAA,MAAAA,CAAKO,UAAU,cAAa,YAAW,UAAS,eAAeb,MAI3EM,EAAAA,cAAAA,MAAAA,CAAKO,WAAWC,EAAAA,EAAAA,GAAKlB,EAAQ0B,kBAAmBC,MAAO,CAAE,aAAgB,KACrEjB,EAAAA,cAAAA,MAAAA,CAAKM,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKlB,EAAQ4B,qBAC9ClB,EAAAA,cAAAA,MAAAA,CAAKO,WAAWC,EAAAA,EAAAA,GAAKlB,EAAQ6B,4BACzBnB,EAAAA,cAAAA,OAAAA,KACIA,EAAAA,cAAAA,IAAAA,CAAGoB,KAAM7B,EAAI8B,UAAW1B,EAAI,mBAKxCK,EAAAA,cAAAA,MAAAA,CAAKM,GAAG,kBAAkBC,WAAWC,EAAAA,EAAAA,GAAKlB,EAAQgC,qBAC9CtB,EAAAA,cAAAA,QAAAA,CACIO,WAAWC,EAAAA,EAAAA,GACPlB,EAAQiC,cACRjC,EAAQkC,qBACRlC,EAAQmC,mBACRnC,EAAQoC,oBAEZC,KAAK,SACLC,MAAOhC,EAAO,cACdiC,UAAW/B,SAQ3C,IAEA,W","sources":["../node_modules/keycloakify/src/lib/components/RegisterUserProfile.tsx"],"sourcesContent":["import React, { memo, useState } from \"react\";\nimport DefaultTemplate from \"./Template\";\nimport type { TemplateProps } from \"./Template\";\nimport type { KcProps } from \"./KcProps\";\nimport type { KcContextBase } from \"../getKcContext/KcContextBase\";\nimport { clsx } from \"../tools/clsx\";\nimport type { I18n } from \"../i18n\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\n\nexport type RegisterUserProfileProps = KcProps & {\n    kcContext: KcContextBase.RegisterUserProfile;\n    i18n: I18n;\n    doFetchDefaultThemeResources?: boolean;\n    Template?: (props: TemplateProps) => JSX.Element | null;\n};\n\nconst RegisterUserProfile = memo((props: RegisterUserProfileProps) => {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template = DefaultTemplate, ...kcProps } = props;\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={clsx(kcProps.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={clsx(kcProps.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                            </div>\n                        </div>\n                    )}\n                    <div className={clsx(kcProps.kcFormGroupClass)} style={{ \"marginBottom\": 30 }}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default RegisterUserProfile;\n"],"names":["RegisterUserProfile","memo","props","kcContext","i18n","doFetchDefaultThemeResources","Template","DefaultTemplate","kcProps","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msg","msgStr","useState","isFomSubmittable","setIsFomSubmittable","React","displayMessage","exists","displayRequiredFields","headerNode","formNode","id","className","clsx","kcFormClass","action","registrationAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcInputWrapperClass","kcFormGroupClass","style","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled"],"sourceRoot":""}