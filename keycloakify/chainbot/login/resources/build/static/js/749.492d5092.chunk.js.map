{"version":3,"file":"static/js/749.492d5092.chunk.js","mappings":"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","sources":["KcApp/Register.tsx"],"sourcesContent":["// This is a copy paste from https://github.com/InseeFrLab/keycloakify/blob/main/src/lib/components/Register.tsx\n// It is now up to us to implement a special behavior to leverage the non standard authorizedMailDomains\n// provided by the plugin: https://github.com/micedre/keycloak-mail-whitelisting installed on our keycloak server.\n// Note that it is no longer recommended to use register.ftl, it's best to use register-user-profile.ftl\n// See: https://docs.keycloakify.dev/realtime-input-validation\n\nimport { memo } from \"react\";\nimport Template from \"keycloakify/lib/components/Template\";\nimport type { KcProps } from \"keycloakify\";\nimport type { KcContext } from \"./kcContext\";\nimport { useCssAndCx } from \"keycloakify/lib/tools/useCssAndCx\";\nimport type { I18n } from \"./i18n\";\n\ntype KcContext_Register = Extract<KcContext, { pageId: \"register.ftl\"; }>;\n\nconst Register = memo(({ kcContext, i18n, ...props }: { kcContext: KcContext_Register; i18n: I18n; } & KcProps) => {\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const { cx } = useCssAndCx();\n\n\tconsole.log(`NOTE: It is up to you do dos something meaningful with ${kcContext.authorizedMailDomains}`)\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={cx(props.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={cx(props.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={cx(props.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={cx(props.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={cx(\n                                    props.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass)\n                                )}\n                            >\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={cx(props.kcInputClass)}\n                                           name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass,\n                                    props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default Register;\n"],"names":["Register","memo","kcContext","i18n","props","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","cx","useCssAndCx","console","log","authorizedMailDomains","doFetchDefaultThemeResources","headerNode","formNode","id","className","kcFormClass","action","registrationAction","method","kcFormGroupClass","printIfExists","kcFormGroupErrorClass","kcLabelWrapperClass","htmlFor","kcLabelClass","kcInputWrapperClass","type","kcInputClass","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","kcFormOptionsClass","kcFormOptionsWrapperClass","href","loginUrl","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","value"],"sourceRoot":""}