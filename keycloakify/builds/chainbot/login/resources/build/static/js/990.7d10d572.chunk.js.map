{"version":3,"file":"static/js/990.7d10d572.chunk.js","mappings":"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","sources":["KcApp/Template.tsx","KcApp/Login.tsx","KcApp/UpdateUserProfile.tsx","KcApp/LoginConfigTotp.tsx","KcApp/KcApp.tsx","KcApp/index.ts","KcApp/i18n.ts"],"sourcesContent":["import React, {useReducer, useEffect, memo} from \"react\";\nimport type {ReactNode} from \"react\";\nimport {assert} from \"keycloakify/lib/tools/assert\";\nimport {useCallbackFactory} from \"powerhooks/useCallbackFactory\";\nimport {headInsert} from \"keycloakify/lib/tools/headInsert\";\nimport {pathJoin} from \"keycloakify/bin/tools/pathJoin\";\nimport {useConstCallback} from \"powerhooks/useConstCallback\";\nimport type {KcTemplateProps} from \"keycloakify/lib/components/KcProps\";\nimport {useCssAndCx} from \"keycloakify/lib/tools/useCssAndCx\";\nimport {I18n, KcContextBase} from \"keycloakify\";\nimport {Grid, Typography} from \"@mui/material\";\nimport chaincueWhite from '../assets/chaincue-logo-crop1-white.png';\nimport chaincueDark from '../assets/chaincue-logo-crop1-dark.png';\nimport chaincueRounded from '../assets/chaincueRounded.png';\n\nexport type TemplateProps = {\n  displayInfo?: boolean;\n  displayMessage?: boolean;\n  displayRequiredFields?: boolean;\n  displayWide?: boolean;\n  showAnotherWayIfPresent?: boolean;\n  headerNode: ReactNode;\n  showUsernameNode?: ReactNode;\n  formNode: ReactNode;\n  infoNode?: ReactNode;\n  /** If you write your own page you probably want\n   * to avoid pulling the default theme assets.\n   */\n  doFetchDefaultThemeResources: boolean;\n} & { kcContext: KcContextBase; i18n: I18n } & KcTemplateProps;\n\nconst Template = memo((props: TemplateProps) => {\n  const {\n    displayInfo = false,\n    displayMessage = false,\n    displayRequiredFields = false,\n    displayWide = false,\n    showAnotherWayIfPresent = true,\n    headerNode,\n    showUsernameNode = null,\n    formNode,\n    infoNode = null,\n    kcContext,\n    i18n,\n    doFetchDefaultThemeResources = false\n  } = props;\n\n  const {cx} = useCssAndCx();\n\n  const {msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag} = i18n;\n\n  const onChangeLanguageClickFactory = useCallbackFactory(([kcLanguageTag]: [string]) => changeLocale(kcLanguageTag));\n\n  const onTryAnotherWayClick = useConstCallback(() => (document.forms[\"kc-select-try-another-way-form\" as never].submit(), false));\n\n  const {realm, locale, auth, url, message, isAppInitiatedAction} = kcContext;\n\n  const [isExtraCssLoaded, setExtraCssLoaded] = useReducer(() => true, false);\n\n  useEffect(() => {\n    if (!doFetchDefaultThemeResources) {\n      setExtraCssLoaded();\n      return;\n    }\n\n    let isUnmounted = false;\n    const cleanups: (() => void)[] = [];\n\n    const toArr = (x: string | readonly string[] | undefined) => (typeof x === \"string\" ? x.split(\" \") : x ?? []);\n    Promise.all(\n      [\n        ...toArr(props.stylesCommon).map(relativePath => {\n          console.log(relativePath)\n          console.log(url.resourcesCommonPath)\n          return pathJoin(url.resourcesCommonPath, relativePath)\n        }),\n        ...toArr(props.styles).map(relativePath => {\n          // console.log(relativePath)\n          // console.log(url.resourcesPath)\n          return pathJoin(url.resourcesPath, relativePath)\n        })\n      ]\n        .reverse()\n        .map(href =>\n          headInsert({\n            \"type\": \"css\",\n            href,\n            \"position\": \"prepend\"\n          })\n        )\n    ).then(() => {\n      if (isUnmounted) {\n        return;\n      }\n      setExtraCssLoaded();\n    });\n\n    toArr(props.scripts).forEach(relativePath =>\n      headInsert({\n        \"type\": \"javascript\",\n        \"src\": pathJoin(url.resourcesPath, relativePath)\n      })\n    );\n\n    if (props.kcHtmlClass !== undefined) {\n      const htmlClassList = document.getElementsByTagName(\"html\")[0].classList;\n\n      const tokens = cx(props.kcHtmlClass).split(\" \");\n\n      htmlClassList.add(...tokens);\n\n      cleanups.push(() => htmlClassList.remove(...tokens));\n    }\n\n    return () => {\n      isUnmounted = true;\n\n      cleanups.forEach(f => f());\n    };\n  }, [props.kcHtmlClass]);\n\n  if (!isExtraCssLoaded) {\n    return null;\n  }\n\n  return (\n    <div className={cx(props.kcLoginClass)}>\n      <Grid container className={cx(props.kcHeaderClass)} >\n        <img src={chaincueDark} height={\"100%\"} width={\"100%\"}/>\n      </Grid>\n      <div className={cx(props.kcFormCardClass, displayWide && props.kcFormCardAccountClass)}>\n        <header className={cx(props.kcFormHeaderClass)}>\n          {realm.internationalizationEnabled && (assert(locale !== undefined), true) && locale.supported.length > 1 && (\n            <div id=\"kc-locale\">\n              <div id=\"kc-locale-wrapper\" className={cx(props.kcLocaleWrapperClass)}>\n                <div className=\"kc-dropdown\" id=\"kc-locale-dropdown\">\n                  {/*<a href=\"#\" id=\"kc-current-locale-link\">*/}\n                  {/*    {labelBySupportedLanguageTag[currentLanguageTag]}*/}\n                  {/*</a>*/}\n                  <ul>\n                    {locale.supported.map(({languageTag}) => (\n                      <li key={languageTag} className=\"kc-dropdown-item\">\n                        <a href=\"#\" onClick={onChangeLanguageClickFactory(languageTag)}>\n                          {labelBySupportedLanguageTag[languageTag]}\n                        </a>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          )}\n          {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n            displayRequiredFields ? (\n              <div className={cx(props.kcContentWrapperClass)}>\n                <div className={cx(props.kcLabelWrapperClass, \"subtitle\")}>\n                                    <span className=\"subtitle\">\n                                        <span className=\"required\">*</span>\n                                      {msg(\"requiredFields\")}\n                                    </span>\n                </div>\n                <div className=\"col-md-10\">\n                  <h1 id=\"kc-page-title\">{headerNode}</h1>\n                </div>\n              </div>\n            ) : (\n              <h1 id=\"kc-page-title\">{headerNode}</h1>\n            )\n          ) : displayRequiredFields ? (\n            <div className={cx(props.kcContentWrapperClass)}>\n              <div className={cx(props.kcLabelWrapperClass, \"subtitle\")}>\n                                <span className=\"subtitle\">\n                                    <span className=\"required\">*</span> {msg(\"requiredFields\")}\n                                </span>\n              </div>\n              <div className=\"col-md-10\">\n                {showUsernameNode}\n                <div className={cx(props.kcFormGroupClass)}>\n                  <div id=\"kc-username\">\n                    <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                    <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                      <div className=\"kc-login-tooltip\">\n                        <i className={cx(props.kcResetFlowIcon)}></i>\n                        <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                      </div>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {showUsernameNode}\n              <div className={cx(props.kcFormGroupClass)}>\n                <div id=\"kc-username\">\n                  <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                  <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                    <div className=\"kc-login-tooltip\">\n                      <i className={cx(props.kcResetFlowIcon)}></i>\n                      <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                    </div>\n                  </a>\n                </div>\n              </div>\n            </>\n          )}\n        </header>\n        <div id=\"kc-content\">\n          <div id=\"kc-content-wrapper\">\n            {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n            {displayMessage && message !== undefined && (message.type !== \"warning\" || !isAppInitiatedAction) && (\n              <div className={cx(\"alert\", `alert-${message.type}`)}>\n                {message.type === \"success\" &&\n                    <span className={cx(props.kcFeedbackSuccessIcon)}></span>}\n                {message.type === \"warning\" &&\n                    <span className={cx(props.kcFeedbackWarningIcon)}></span>}\n                {message.type === \"error\" && <span className={cx(props.kcFeedbackErrorIcon)}></span>}\n                {message.type === \"info\" && <span className={cx(props.kcFeedbackInfoIcon)}></span>}\n                <span\n                  className=\"kc-feedback-text\"\n                  dangerouslySetInnerHTML={{\n                    \"__html\": message.summary\n                  }}\n                />\n              </div>\n            )}\n            {formNode}\n            {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n              <form\n                id=\"kc-select-try-another-way-form\"\n                action={url.loginAction}\n                method=\"post\"\n                className={cx(displayWide && props.kcContentWrapperClass)}\n              >\n                <div\n                  className={cx(displayWide && [props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass])}>\n                  <div className={cx(props.kcFormGroupClass)}>\n                    <input type=\"hidden\" name=\"tryAnotherWay\" value=\"on\"/>\n                    <a href=\"#\" id=\"try-another-way\" onClick={onTryAnotherWayClick}>\n                      {msg(\"doTryAnotherWay\")}\n                    </a>\n                  </div>\n                </div>\n              </form>\n            )}\n            {displayInfo && (\n              <div id=\"kc-info\" className={cx(props.kcSignUpClass)}>\n                <div id=\"kc-info-wrapper\" className={cx(props.kcInfoAreaWrapperClass)}>\n                  {infoNode}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Template;\n","import type {FormEventHandler} from \"react\";\nimport React, {memo, useState} from \"react\";\nimport {useConstCallback} from \"powerhooks/useConstCallback\";\nimport {I18n, KcContextBase, KcProps} from \"keycloakify\";\nimport {useCssAndCx} from \"keycloakify/lib/tools/useCssAndCx\";\nimport {Box, Button, Grid, Link, TextField, Typography, useMediaQuery} from \"@mui/material\";\nimport Template from \"./Template\";\nimport chaincueWhite from '../assets/chaincue-logo-crop1-white.png';\nimport chaincueDark from '../assets/chaincue-logo-crop1-dark.png';\nimport chaincueRounded from '../assets/chaincueRounded.png';\nimport {useTheme} from '@mui/material/styles';\n\nconst Login = memo(({kcContext, i18n, ...props}: { kcContext: KcContextBase.Login; i18n: I18n } & KcProps) => {\n  const {social, realm, url, usernameEditDisabled, login, auth, registrationDisabled} = kcContext;\n  const theme = useTheme();\n  const isMobileView = useMediaQuery(theme.breakpoints.up('sm'));\n  const {msg, msgStr} = i18n;\n  const [hover, setHover] = useState(false);\n\n  const handleMouseEnter = () => {\n    setHover(true);\n  };\n\n  const handleMouseLeave = () => {\n    setHover(false);\n  };\n  const {cx} = useCssAndCx();\n\n  const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n  const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n    e.preventDefault();\n\n    setIsLoginButtonDisabled(true);\n\n    const formElement = e.target as HTMLFormElement;\n\n    //NOTE: Even if we login with email Keycloak expect username and password in\n    //the POST request.\n    formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n    formElement.submit();\n  });\n  const colorsBorder = \"#f68133\"\n\n  return (\n    <Grid container height={\"100vh\"} width={\"100%\"} justifyContent={\"center\"}>\n      {/*<Grid item xs={3} borderRadius={5} boxShadow={1} mt={4} ml={5}*/}\n      {/*      sx={{backgroundColor: \"white\", maxHeight: \"90%\", display: {xs: \"none\", lg: \"block\"}}}*/}\n      {/*>*/}\n      {/*  /!*<Grid item xs={12} p={5} mt={5}>*!/*/}\n      {/*  /!*  <Link href={\"#\"}>*!/*/}\n      {/*  /!*    <img src={chaincueWhite} height={80} width={\"100%\"}/>*!/*/}\n      {/*  /!*  </Link>*!/*/}\n      {/*  /!*</Grid>*!/*/}\n      {/*  /!*<Grid item xs={12} p={1}>*!/*/}\n      {/*  /!*  <Typography variant={\"h3\"} fontWeight={\"bold\"} textAlign={\"center\"} color={\"#1faf19\"}>*!/*/}\n      {/*  /!*    Välkommen tillbaks*!/*/}\n      {/*  /!*  </Typography>*!/*/}\n      {/*  /!*</Grid>*!/*/}\n      {/*  <Grid item pt={0}>*/}\n      {/*    <img src={chaincueRounded} width={\"100%\"}/>*/}\n      {/*  </Grid>*/}\n      {/*</Grid>*/}\n\n      <Grid item xs={8} sx={{'& .card-pf': {borderRadius: 10, backgroundColor: \"transparent\"}}} mt={20}>\n        <Template\n          {...{kcContext, i18n, ...props}}\n          doFetchDefaultThemeResources={true}\n          // displayInfo={social.displayInfo}\n          // displayWide={realm.password && social.providers !== undefined}\n          headerNode={msg(\"doLogIn\")}\n          formNode={\n            <Grid id=\"kc-form\"\n                  className={cx(realm.password && social.providers !== undefined && props.kcContentWrapperClass)}\n            >\n              <div\n                id=\"kc-form-wrapper\"\n                className={cx(realm.password && social.providers && [props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass])}\n              >\n                {realm.password && (\n                  <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                    <Grid container>\n                      {(() => {\n                        const label = !realm.loginWithEmailAllowed\n                          ? \"username\"\n                          : realm.registrationEmailAsUsername\n                            ? \"email\"\n                            : \"usernameOrEmail\";\n                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n                        return (\n                          <>\n                            {/*<Grid item xs={12}>*/}\n                            {/*  <TextField*/}\n                            {/*    label=\"Email address\"*/}\n                            {/*    color={\"success\"}*/}\n                            {/*    fullWidth*/}\n                            {/*    tabIndex={1}*/}\n                            {/*    id={autoCompleteHelper}*/}\n                            {/*    // className={cx(props.kcInputClass)}*/}\n                            {/*    name={autoCompleteHelper}*/}\n                            {/*    defaultValue={login.username ?? \"\"}*/}\n                            {/*    type=\"text\"*/}\n                            {/*    {...(usernameEditDisabled*/}\n                            {/*      ? {\"disabled\": true}*/}\n                            {/*      : {*/}\n                            {/*        \"autoFocus\": true,*/}\n                            {/*        \"autoComplete\": \"off\"*/}\n                            {/*      })}*/}\n                            {/*  />*/}\n                            {/*</Grid>*/}\n\n                            {/*<Grid item xs={12} mt={2}>*/}\n                            {/*  <TextField*/}\n                            {/*    label={msg(\"password\")}*/}\n                            {/*    color={\"warning\"}*/}\n                            {/*    sx={{*/}\n                            {/*      '&.MuiOutlinedInput-notchedOutline': {color: \"red\"},*/}\n                            {/*    }}*/}\n                            {/*    fullWidth*/}\n                            {/*    tabIndex={2}*/}\n                            {/*    id=\"password\"*/}\n                            {/*    // className={cx(props.kcInputClass)}*/}\n                            {/*    name=\"password\"*/}\n                            {/*    type=\"password\"*/}\n                            {/*    autoComplete=\"off\"*/}\n                            {/*  />*/}\n                            {/*</Grid>*/}\n\n                            <label htmlFor={autoCompleteHelper} className={cx(props.kcLabelClass)}>\n                              {msg(label)}\n                            </label>\n                            <input\n                              style={{\n                                backgroundColor: \"transparent\",\n                                border: `1px solid ${colorsBorder}`,\n                                color: \"#d3d3d3\",\n                            }}\n                              tabIndex={1}\n                              id={autoCompleteHelper}\n                              className={cx(props.kcInputClass)}\n                              name={autoCompleteHelper}\n                              defaultValue={login.username ?? \"chatbot@gmail.com\"}\n                              type=\"text\"\n                              {...(usernameEditDisabled\n                                ? {\"disabled\": true}\n                                : {\n                                  \"autoFocus\": true,\n                                  \"autoComplete\": \"off\"\n                                })}\n                            />\n                          </>\n                        );\n                      })()}\n                    </Grid>\n                    <div className={cx(props.kcFormGroupClass)}\n                    >\n                      <label htmlFor=\"password\" className={cx(props.kcLabelClass)}\n                      >\n                        {msg(\"password\")}\n                      </label>\n                      <input\n                        style={{\n                          backgroundColor: \"transparent\",\n                          border: `1px solid ${colorsBorder}`,\n                          color: \"#d3d3d3\",\n                          \":focus\": {\n                            outline: \"none\",\n                            boxShadow: \"0 0 0 3px red\"\n                          }\n                        } as React.CSSProperties}\n                        tabIndex={2}\n                        id=\"password\"\n                        className={cx(props.kcInputClass)}\n                        name=\"password\"\n                        type=\"password\"\n                        autoComplete=\"off\"\n                        defaultValue={\"chatbot@gmail.com\"}\n                      />\n                    </div>\n                    <Grid container\n                          className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                      <Grid item id=\"kc-form-options\" mt={3}>\n                        {realm.rememberMe && !usernameEditDisabled && (\n                          <div className=\"checkbox\">\n                            <label>\n                              <input\n                                tabIndex={3}\n                                id=\"rememberMe\"\n                                name=\"rememberMe\"\n                                type=\"checkbox\"\n                                {...(login.rememberMe\n                                  ? {\n                                    \"checked\": true\n                                  }\n                                  : {})}\n                              />\n                              {msg(\"rememberMe\")}\n                            </label>\n                          </div>\n                        )}\n                      </Grid>\n                      <Grid item mt={3} className={cx(props.kcFormOptionsWrapperClass)}>\n                        {realm.resetPasswordAllowed && (\n                          <span><a tabIndex={5} href={url.loginResetCredentialsUrl}>{msg(\"doForgotPassword\")}</a></span>\n                        )}\n                      </Grid>\n                    </Grid>\n                    <div id=\"kc-form-buttons\" className={cx(props.kcFormGroupClass)}>\n                      <input\n                        type=\"hidden\"\n                        id=\"id-hidden-input\"\n                        name=\"credentialId\"\n                        {...(auth?.selectedCredential !== undefined\n                          ? {\n                            \"value\": auth.selectedCredential\n                          }\n                          : {})}\n                      />\n                      {/*<Button variant={\"contained\"}*/}\n                      {/*        fullWidth*/}\n                      {/*        name=\"login\"*/}\n                      {/*        id=\"kc-login\"*/}\n                      {/*        tabIndex={4}*/}\n                      {/*        type=\"submit\"*/}\n                      {/*        value={msgStr(\"doLogIn\")}*/}\n                      {/*        disabled={isLoginButtonDisabled}*/}\n                      {/*>*/}\n                      {/*  {msgStr(\"doLogIn\")}*/}\n                      {/*</Button>*/}\n                      <input\n                        tabIndex={4}\n                        className={cx(\n                          props.kcButtonClass,\n                          props.kcButtonPrimaryClass,\n                          props.kcButtonBlockClass,\n                          props.kcButtonLargeClass\n                        )\n                      }\n                        name=\"login\"\n                        id=\"kc-login\"\n                        type=\"submit\"\n                        value={msgStr(\"doLogIn\")}\n                        disabled={isLoginButtonDisabled}\n                      />\n                      {/*<input*/}\n                      {/*  tabIndex={4}*/}\n                      {/*  style={{*/}\n                      {/*    backgroundColor: \"blue\",*/}\n                      {/*    // ':hover': {backgroundColor: \"red\"}*/}\n                      {/*  } as React.CSSProperties}*/}\n                      {/*  className={cx(*/}\n                      {/*    props.kcButtonClass,*/}\n                      {/*    props.kcButtonPrimaryClass,*/}\n                      {/*    props.kcButtonBlockClass,*/}\n                      {/*    props.kcButtonLargeClass,*/}\n\n                      {/*  )}*/}\n                      {/*  name=\"login\"*/}\n                      {/*  id=\"kc-login\"*/}\n                      {/*  type=\"submit\"*/}\n                      {/*  value={msgStr(\"doLogIn\")}*/}\n                      {/*  disabled={isLoginButtonDisabled}*/}\n                      {/*/>*/}\n\n                    </div>\n                  </form>\n                )}\n              </div>\n              {realm.password && social.providers !== undefined && (\n                <div id=\"kc-social-providers\"\n                     className={cx(props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass)}>\n                  <ul\n                    className={cx(\n                      props.kcFormSocialAccountListClass,\n                      social.providers.length > 4 && props.kcFormSocialAccountDoubleListClass\n                    )}\n                  >\n                    {social.providers.map(p => (\n                      <li key={p.providerId}\n                          className={cx(props.kcFormSocialAccountListLinkClass)}>\n                        <a href={p.loginUrl} id={`zocial-${p.alias}`}\n                           className={cx(\"zocial\", p.providerId)}>\n                          <span>{p.displayName}</span>\n                        </a>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </Grid>\n          }\n          infoNode={\n            realm.password &&\n            realm.registrationAllowed &&\n            !registrationDisabled && (\n              <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                          <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n              </div>\n            )\n          }\n        />\n      </Grid>\n    </Grid>\n  )\n})\n\nexport default Login;\n","import React, { useState, memo } from \"react\";\nimport Template from \"./Template\";\nimport type { KcProps } from \"keycloakify/lib/components/KcProps\";\nimport type { KcContextBase } from \"keycloakify/lib/getKcContext/KcContextBase\";\nimport { useCssAndCx } from \"keycloakify/lib/tools/useCssAndCx\";\nimport type { I18n } from \"keycloakify/lib/i18n\";\nimport { UserProfileFormFields } from \"keycloakify/lib/components/shared/UserProfileCommons\";\n\nconst UpdateUserProfile = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.UpdateUserProfile; i18n: I18n } & KcProps) => {\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = i18n;\n\n    const { url, isAppInitiatedAction } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"loginProfileTitle\")}\n            formNode={\n                <form id=\"kc-update-profile-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...props} />\n\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}></div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            {isAppInitiatedAction ? (\n                                <>\n                                    <input\n                                        className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        value={msgStr(\"doSubmit\")}\n                                    />\n                                    <button\n                                        className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        name=\"cancel-aia\"\n                                        value=\"true\"\n                                        formNoValidate\n                                    >\n                                        {msg(\"doCancel\")}\n                                    </button>\n                                </>\n                            ) : (\n                                <input\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonPrimaryClass,\n                                        props.kcButtonBlockClass,\n                                        props.kcButtonLargeClass\n                                    )}\n                                    type=\"submit\"\n                                    defaultValue={msgStr(\"doSubmit\")}\n                                    disabled={!isFomSubmittable}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\nexport default UpdateUserProfile;\n","import React, { memo } from \"react\";\nimport Template from \"./Template\";\nimport {useCssAndCx} from \"keycloakify/lib/tools/useCssAndCx\";\nimport { I18n, KcProps } from \"keycloakify\";\nimport {KcContextBase} from \"keycloakify/lib/getKcContext/KcContextBase\";\n\n\nconst LoginConfigTotp = memo(({ kcContext, i18n, ...props }: { kcContext: KcContextBase.LoginConfigTotp; i18n: I18n } & KcProps) => {\n    const { url, isAppInitiatedAction, totp, mode, messagesPerField } = kcContext;\n\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = i18n;\n\n    const algToKeyUriAlg: Record<KcContextBase.LoginConfigTotp[\"totp\"][\"policy\"][\"algorithm\"], string> = {\n        HmacSHA1: \"SHA1\",\n        HmacSHA256: \"SHA256\",\n        HmacSHA512: \"SHA512\"\n    };\n\n    return (\n        <Template\n            {...{ kcContext, i18n, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"loginTotpTitle\")}\n            formNode={\n                <>\n                    <ol id=\"kc-totp-settings\">\n                        <li>\n                            <p>{msg(\"loginTotpStep1\")}</p>\n\n                            <ul id=\"kc-totp-supported-apps\">\n                                {totp.policy.supportedApplications.map(app => (\n                                    <li>{app}</li>\n                                ))}\n                            </ul>\n                        </li>\n\n                        {mode && mode == \"manual\" ? (\n                            <>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep2\")}</p>\n                                    <p>\n                                        <span id=\"kc-totp-secret-key\">{totp.totpSecretEncoded}</span>\n                                    </p>\n                                    <p>\n                                        <a href={totp.qrUrl} id=\"mode-barcode\">\n                                            {msg(\"loginTotpScanBarcode\")}\n                                        </a>\n                                    </p>\n                                </li>\n                                <li>\n                                    <p>{msg(\"loginTotpManualStep3\")}</p>\n                                    <p>\n                                        <ul>\n                                            <li id=\"kc-totp-type\">\n                                                {msg(\"loginTotpType\")}: {msg(`loginTotp.${totp.policy.type}`)}\n                                            </li>\n                                            <li id=\"kc-totp-algorithm\">\n                                                {msg(\"loginTotpAlgorithm\")}: {algToKeyUriAlg?.[totp.policy.algorithm] ?? totp.policy.algorithm}\n                                            </li>\n                                            <li id=\"kc-totp-digits\">\n                                                {msg(\"loginTotpDigits\")}: {totp.policy.digits}\n                                            </li>\n                                            {totp.policy.type === \"totp\" ? (\n                                                <li id=\"kc-totp-period\">\n                                                    {msg(\"loginTotpInterval\")}: {totp.policy.period}\n                                                </li>\n                                            ) : (\n                                                <li id=\"kc-totp-counter\">\n                                                    {msg(\"loginTotpCounter\")}: {totp.policy.initialCounter}\n                                                </li>\n                                            )}\n                                        </ul>\n                                    </p>\n                                </li>\n                            </>\n                        ) : (\n                            <li>\n                                <p>{msg(\"loginTotpStep2\")}</p>\n                                <img id=\"kc-totp-secret-qr-code\" src={`data:image/png;base64, ${totp.totpSecretQrCode}`} alt=\"Figure: Barcode\" />\n                                <br />\n                                <p>\n                                    <a href={totp.manualUrl} id=\"mode-manual\">\n                                        {msg(\"loginTotpUnableToScan\")}\n                                    </a>\n                                </p>\n                            </li>\n                        )}\n                        <li>\n                            <p>{msg(\"loginTotpStep3\")}</p>\n                            <p>{msg(\"loginTotpStep3DeviceName\")}</p>\n                        </li>\n                    </ol>\n\n                    <form action={url.loginAction} className={cx(props.kcFormClass)} id=\"kc-totp-settings-form\" method=\"post\">\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <label htmlFor=\"totp\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"authenticatorCode\")}\n                                </label>{\" \"}\n                                <span className=\"required\">*</span>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"totp\"\n                                    name=\"totp\"\n                                    autoComplete=\"off\"\n                                    className={cx(props.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"totp\")}\n                                />\n\n                                {messagesPerField.existsError(\"totp\") && (\n                                    <span id=\"input-error-otp-code\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"totp\")}\n                                    </span>\n                                )}\n                            </div>\n                            <input type=\"hidden\" id=\"totpSecret\" name=\"totpSecret\" value={totp.totpSecret} />\n                            {mode && <input type=\"hidden\" id=\"mode\" value={mode} />}\n                        </div>\n\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <label htmlFor=\"userLabel\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"loginTotpDeviceName\")}\n                                </label>{\" \"}\n                                {totp.otpCredentials.length >= 1 && <span className=\"required\">*</span>}\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"userLabel\"\n                                    name=\"userLabel\"\n                                    autoComplete=\"off\"\n                                    className={cx(props.kcInputClass)}\n                                    aria-invalid={messagesPerField.existsError(\"userLabel\")}\n                                />\n                                {messagesPerField.existsError(\"userLabel\") && (\n                                    <span id=\"input-error-otp-label\" className={cx(props.kcInputErrorMessageClass)} aria-live=\"polite\">\n                                        {messagesPerField.get(\"userLabel\")}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n\n                        {isAppInitiatedAction ? (\n                            <>\n                                <input\n                                    type=\"submit\"\n                                    className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                    id=\"saveTOTPBtn\"\n                                    value={msgStr(\"doSubmit\")}\n                                />\n                                <button\n                                    type=\"submit\"\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonDefaultClass,\n                                        props.kcButtonLargeClass,\n                                        props.kcButtonLargeClass\n                                    )}\n                                    id=\"cancelTOTPBtn\"\n                                    name=\"cancel-aia\"\n                                    value=\"true\"\n                                >\n                                    ${msg(\"doCancel\")}\n                                </button>\n                            </>\n                        ) : (\n                            <input\n                                type=\"submit\"\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                id=\"saveTOTPBtn\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        )}\n                    </form>\n                </>\n            }\n        />\n    );\n});\n\nexport default LoginConfigTotp;\n","import \"./KcApp.css\";\nimport { lazy, Suspense } from \"react\";\nimport type { KcContext } from \"./kcContext\";\nimport KcAppBase, { defaultKcProps } from \"keycloakify\";\nimport { useI18n } from \"./i18n\";\nimport Login from \"./Login\";\nimport UpdateUserProfile from \"./UpdateUserProfile\";\nimport LoginConfigTotp from \"./LoginConfigTotp\";\n\n\nconst Register = lazy(() => import(\"./Register\"));\nconst Terms = lazy(() => import(\"./Terms\"));\nconst MyExtraPage2 = lazy(() => import(\"./MyExtraPage2\"));\nconst MyExtraPage1 = lazy(() => import(\"./MyExtraPage1\"));\n\nexport type Props = {\n    kcContext: KcContext;\n};\n\nexport default function KcApp({ kcContext }: Props) {\n    const i18n = useI18n({ kcContext });\n\n    //NOTE: Locales not yet downloaded\n    if (i18n === null) {\n        return null;\n    }\n\n    const props = {\n        i18n,\n        ...defaultKcProps,\n        // NOTE: The classes are defined in ./KcApp.css\n        \"kcHeaderWrapperClass\": \"my-color my-font\",\n    };\n\n    return (\n        <Suspense>\n            {(() => {\n                switch (kcContext.pageId) {\n                    case \"register.ftl\": return <Register {...{ kcContext, ...props }} />;\n                    case \"login.ftl\": return <Login {...{ kcContext, ...props }} />;\n                    case \"terms.ftl\": return <Terms {...{ kcContext, ...props }} />;\n                    case \"update-user-profile.ftl\": return <UpdateUserProfile {...{ kcContext, ...props }} />;\n                    case \"login-config-totp.ftl\": return <LoginConfigTotp {...{ kcContext, ...props }} />;\n                    case \"my-extra-page-1.ftl\": return <MyExtraPage1 {...{ kcContext, ...props }} />;\n                    case \"my-extra-page-2.ftl\": return <MyExtraPage2 {...{ kcContext, ...props }} />;\n                    default: return <KcAppBase {...{ kcContext, ...props }} />;\n                }\n            })()}\n        </Suspense>\n    );\n\n}\n","import KcApp from \"./KcApp\";\nexport * from \"./KcApp\";\nexport default KcApp;\n","import { useI18n as useI18nBase } from \"keycloakify\";\n\ntype Props = Omit<Parameters<typeof useI18nBase>[0], \"extraMessages\">;\n\nexport function useI18n(props: Props) {\n    const { kcContext } = props;\n    return useI18nBase({\n        kcContext,\n        \"extraMessages\": {\n            \"en\": {\n                \"alphanumericalCharsOnly\": \"Only alphanumerical characters\",\n\t\t\t\t\"gender\": \"Gender\",\n\t\t\t\t// Here we overwrite the default english value for the message \"doForgotPassword\" \n                // that is \"Forgot Password?\" see: https://github.com/InseeFrLab/keycloakify/blob/f0ae5ea908e0aa42391af323b6d5e2fd371af851/src/lib/i18n/generated_messages/18.0.1/login/en.ts#L17\n                \"doForgotPassword\": \"I forgot my password\"\n            },\n            \"fr\": {\n                /* spell-checker: disable */\n                \"alphanumericalCharsOnly\": \"Caractère alphanumérique uniquement\",\n\t\t\t\t\"gender\": \"Genre\",\n\t\t\t\t\"doForgotPassword\": \"J'ai oublié mon mot de passe\"\n                /* spell-checker: enable */\n            },\n        },\n    });\n}\n\nexport type I18n = NonNullable<ReturnType<typeof useI18n>>;"],"names":["memo","props","displayInfo","displayMessage","displayRequiredFields","displayWide","showAnotherWayIfPresent","headerNode","showUsernameNode","formNode","infoNode","kcContext","i18n","doFetchDefaultThemeResources","cx","useCssAndCx","msg","changeLocale","labelBySupportedLanguageTag","onChangeLanguageClickFactory","currentLanguageTag","useCallbackFactory","kcLanguageTag","onTryAnotherWayClick","useConstCallback","document","forms","submit","realm","locale","auth","url","message","isAppInitiatedAction","useReducer","isExtraCssLoaded","setExtraCssLoaded","useEffect","isUnmounted","cleanups","toArr","x","split","Promise","all","stylesCommon","map","relativePath","console","log","resourcesCommonPath","pathJoin","styles","resourcesPath","reverse","href","headInsert","then","scripts","forEach","undefined","kcHtmlClass","htmlClassList","getElementsByTagName","classList","tokens","add","push","remove","f","className","kcLoginClass","Grid","container","kcHeaderClass","src","chaincueDark","height","width","kcFormCardClass","kcFormCardAccountClass","kcFormHeaderClass","internationalizationEnabled","assert","supported","length","id","kcLocaleWrapperClass","languageTag","onClick","showUsername","showResetCredentials","kcContentWrapperClass","kcLabelWrapperClass","kcFormGroupClass","attemptedUsername","loginRestartFlowUrl","kcResetFlowIcon","type","kcFeedbackSuccessIcon","kcFeedbackWarningIcon","kcFeedbackErrorIcon","kcFeedbackInfoIcon","dangerouslySetInnerHTML","summary","showTryAnotherWayLink","action","loginAction","method","kcFormSocialAccountContentClass","kcFormSocialAccountClass","name","value","kcSignUpClass","kcInfoAreaWrapperClass","social","usernameEditDisabled","login","registrationDisabled","theme","useTheme","useMediaQuery","breakpoints","up","msgStr","useState","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","e","preventDefault","formElement","target","querySelector","setAttribute","colorsBorder","justifyContent","item","xs","sx","borderRadius","backgroundColor","mt","password","providers","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","htmlFor","kcLabelClass","style","border","color","tabIndex","kcInputClass","defaultValue","username","outline","boxShadow","autoComplete","kcFormSettingClass","rememberMe","kcFormOptionsWrapperClass","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","disabled","kcFormSocialAccountListClass","kcFormSocialAccountDoubleListClass","p","kcFormSocialAccountListLinkClass","loginUrl","alias","providerId","displayName","registrationAllowed","registrationUrl","isFomSubmittable","setIsFomSubmittable","kcFormClass","onIsFormSubmittableValueChange","kcFormOptionsClass","kcFormButtonsClass","kcButtonDefaultClass","formNoValidate","totp","mode","messagesPerField","algToKeyUriAlg","HmacSHA1","HmacSHA256","HmacSHA512","policy","supportedApplications","app","totpSecretEncoded","qrUrl","algorithm","digits","period","initialCounter","totpSecretQrCode","alt","manualUrl","kcInputWrapperClass","existsError","kcInputErrorMessageClass","get","totpSecret","otpCredentials","Register","lazy","Terms","MyExtraPage2","MyExtraPage1","useI18nBase","useI18n","defaultKcProps","Suspense","pageId"],"sourceRoot":""}